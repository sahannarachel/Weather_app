{"ast":null,"code":"var _jsxFileName = \"/Users/john/weather-app/src/components/WeatherApp.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CurrentWeather from './currentweather';\nimport Forecast from './forecast';\nimport Search from './search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'f70d43777d849fb7283f07085ca20460'; // Replace with your OpenWeatherMap API key\n\nconst WeatherApp = () => {\n  _s();\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [location, setLocation] = useState('');\n  const fetchWeather = async city => {\n    try {\n      const weatherResponse = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n      setCurrentWeather(weatherResponse.data);\n      const forecastResponse = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`);\n      setForecast(forecastResponse.data);\n    } catch (error) {\n      console.error('Error fetching weather data', error);\n    }\n  };\n  const fetchWeatherByLocation = async (lat, lon) => {\n    try {\n      const weatherResponse = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\n      setCurrentWeather(weatherResponse.data);\n      const forecastResponse = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\n      setForecast(forecastResponse.data);\n    } catch (error) {\n      console.error('Error fetching weather data', error);\n    }\n  };\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      fetchWeatherByLocation(position.coords.latitude, position.coords.longitude);\n    }, error => {\n      console.error('Error getting location', error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onSearch: fetchWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), currentWeather && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n      data: currentWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 26\n    }, this), forecast && /*#__PURE__*/_jsxDEV(Forecast, {\n      data: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherApp, \"hPELPk+QeYYtPA4JyPTR+evHRUI=\");\n_c = WeatherApp;\nexport default WeatherApp;\nvar _c;\n$RefreshReg$(_c, \"WeatherApp\");","map":{"version":3,"names":["React","useState","useEffect","axios","CurrentWeather","Forecast","Search","jsxDEV","_jsxDEV","API_KEY","WeatherApp","_s","currentWeather","setCurrentWeather","forecast","setForecast","location","setLocation","fetchWeather","city","weatherResponse","get","data","forecastResponse","error","console","fetchWeatherByLocation","lat","lon","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","children","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/john/weather-app/src/components/WeatherApp.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport CurrentWeather from './currentweather';\nimport Forecast from './forecast';\nimport Search from './search';\n\nconst API_KEY = 'f70d43777d849fb7283f07085ca20460'; // Replace with your OpenWeatherMap API key\n\nconst WeatherApp = () => {\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [location, setLocation] = useState('');\n\n  const fetchWeather = async (city) => {\n    try {\n      const weatherResponse = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n      setCurrentWeather(weatherResponse.data);\n\n      const forecastResponse = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric`);\n      setForecast(forecastResponse.data);\n    } catch (error) {\n      console.error('Error fetching weather data', error);\n    }\n  };\n\n  const fetchWeatherByLocation = async (lat, lon) => {\n    try {\n      const weatherResponse = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\n      setCurrentWeather(weatherResponse.data);\n\n      const forecastResponse = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`);\n      setForecast(forecastResponse.data);\n    } catch (error) {\n      console.error('Error fetching weather data', error);\n    }\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        fetchWeatherByLocation(position.coords.latitude, position.coords.longitude);\n      },\n      (error) => {\n        console.error('Error getting location', error);\n      }\n    );\n  }, []);\n\n  return (\n    <div>\n      <Search onSearch={fetchWeather} />\n      {currentWeather && <CurrentWeather data={currentWeather} />}\n      {forecast && <Forecast data={forecast} />}\n    </div>\n  );\n};\n\nexport default WeatherApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}